searchState.loadedDescShard("rustix", 1, "Return shared UMEM file descriptor.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nTx ring offsets.\nTx invalid descriptors.\nTx ring empty descriptors.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nA trait for passing path arguments.\nReturns a view of this string as a maybe-owned <code>CStr</code>.\nReturns a view of this string as a string slice.\nConsumes <code>self</code> and returns a view of this string as a …\nRuns a closure with <code>self</code> passed in as a <code>&amp;CStr</code>.\nRuns a closure on <code>arg</code> where <code>A</code> is mapped to a <code>&amp;CStr</code>\nReturns a potentially-lossy rendering of this string as a …\nAsync recoverable exception mode.\n<code>SIGABRT</code>, aka <code>SIGIOT</code>\n<code>SIGALRM</code>\nWait on all processes.\nDisable <code>ptrace</code> restrictions for the calling process.\nSet the address below which the program command line is …\nSet the address above which the program command line is …\n<code>RLIMIT_AS</code>\nBig endian mode.\nSet the current <code>brk</code> value.\nSet the address above which the program heap can be …\n<code>SIGBUS</code>\nReturn if a stopped child has been resumed by delivery of […\nReturn if a stopped child has been resumed by delivery of […\n<code>SIGCHLD</code>\nSet the address below which the program text can run.\nSet the address above which the program text can run.\n<code>SIGCONT</code>\n<code>RLIMIT_CORE</code>\n<code>RLIMIT_CPU</code>\n<code>CpuSet</code> represents a bit-mask of CPUs.\nA Linux CPU ID.\nThe speculation feature is disabled, mitigation is enabled.\nThe speculation feature is disabled, mitigation is enabled.\nThe speculation feature is disabled, mitigation is …\nThe speculation feature is disabled, mitigation is …\nFloating point divide by zero.\n<code>RLIMIT_DATA</code>\nSet the address below which initialized and uninitialized …\nSet the address above which initialized and uninitialized …\nSystem-wide default policy.\nDumpable.\n<code>SUID_DUMP_*</code> values for use with <code>dumpable_behavior</code> and …\nDumpable but only readable by root.\nThe speculation feature is enabled, mitigation is disabled.\nThe speculation feature is enabled, mitigation is disabled.\nWait for processed that have exited.\n<code>EXIT_FAILURE</code> for use with <code>exit</code>.\nThe exit status used by a process terminated with a …\n<code>EXIT_SUCCESS</code> for use with <code>exit</code>.\nEarly kill policy.\n<code>PR_ENDIAN_*</code> values for use with <code>endian_mode</code>.\nSet the address below which the program environment is …\nSet the address above which the program environment is …\nThe speculation feature is disabled, mitigation is …\nThe speculation feature is disabled, mitigation is …\nEnable emulation of 32-bit floating-point mode.\n<code>PR_FPEMU_*</code> flags for use with …\nZero means floating point exceptions are disabled.\n<code>PR_FP_MODE_*</code> values for use with <code>floating_point_mode</code> and …\n64-bit floating point registers.\nFlush L1D Cache on context switch out of the task.\nRaw file descriptor in another process.\n<code>SIGFPE</code>\n<code>RLIMIT_FSIZE</code>\n<code>MEMBARRIER_CMD_GLOBAL</code> (also known as <code>MEMBARRIER_CMD_SHARED</code>)\n<code>MEMBARRIER_CMD_GLOBAL_EXPEDITED</code>\n<code>gid_t</code>—A Unix group ID.\n<code>MEMBARRIER_CMD_GLOBAL</code>\n<code>MEMBARRIER_CMD_GLOBAL_EXPEDITED</code>\n<code>SIGHUP</code>\nA <code>Pid</code> corresponding to the init process (pid 1).\nFloating point invalid operation.\n<code>SIGILL</code>\nSet the state of the indirect branch speculation …\n<code>SIGINT</code>\n<code>SIGIO</code>, aka <code>SIGPOLL</code>\n<code>SIGKILL</code>\nLate kill policy.\nTrue little endian mode.\n<code>RLIMIT_LOCKS</code>\nThe maximum number of CPU in <code>CpuSet</code>.\n<code>PR_MCE_KILL_*</code> values for use with …\nA command for use with <code>membarrier</code> and <code>membarrier_cpu</code>.\nA result from <code>membarrier_query</code>.\n<code>RLIMIT_MEMLOCK</code>\n<code>RLIMIT_MSGQUEUE</code>\nReturn immediately if no child has exited.\nReturn immediately if no child has exited.\n<code>PIDFD_NONBLOCK</code>.\nAsync non-recoverable exception mode.\nKeep processed in a waitable state.\nSilently fix up unaligned user accesses.\nSilently emulate floating point operations accesses.\n<code>RLIMIT_NICE</code>\n<code>RLIMIT_NOFILE</code>\nNone.\nNot dumpable.\n<code>RLIMIT_NPROC</code>\nFloating point overflow.\nMitigation can be controlled per thread by …\nPrecise exception mode.\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ</code> (since Linux 5.10)\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE</code>\nProcess ptracer.\nWait for a specific process group ID, or the calling …\n<code>pid_t</code>—A non-zero Unix process ID.\nWait for a specific process ID.\nWait for a specific process file descriptor.\n<code>PIDFD_*</code> flags for use with <code>pidfd_open</code>.\nAll flags are reserved for future use.\n<code>SIGPIPE</code>\n<code>SIGPWR</code>\n<code>PowerPC</code> pseudo little endian.\nThis structure provides new memory descriptor map which …\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_RSEQ</code> (since Linux 5.10)\n<code>MEMBARRIER_CMD_PRIVATE_EXPEDITED_SYNC_CORE</code>\nSpecific process.\n<code>SIGPROF</code>\n<code>SIGQUIT</code>\n<code>MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ</code> (since …\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE</code>\nFloating point inexact result.\nThrow a <code>Signal::Segv</code> signal instead of reading the TSC.\nThe raw integer value of a Unix group ID. A group …\nThe raw integer value of a Unix process ID. A process …\nThe raw integer value of a Unix user ID. A user identifier …\nAllow the use of the timestamp counter.\n<code>MEMBARRIER_CMD_REGISTER_GLOBAL_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED</code>\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_RSEQ</code> (since …\n<code>MEMBARRIER_CMD_REGISTER_PRIVATE_EXPEDITED_SYNC_CORE</code>\nA resource value for use with <code>getrlimit</code>, <code>setrlimit</code>, and …\n<code>struct rlimit</code>—Current and maximum values used in …\n<code>RLIMIT_RSS</code>\n<code>RLIMIT_RTPRIO</code>\n<code>RLIMIT_RTTIME</code>\nGenerate a <code>Signal::Bus</code> signal on unaligned user access.\nDon’t emulate floating point operations, send a …\nWait for processes that have been stopped.\nUse FPEXC for floating point exception enables.\n<code>SIGSEGV</code>\nA signal number for use with <code>kill_process</code>, …\n<code>RLIMIT_SIGPENDING</code>\n<code>PR_SPEC_*</code> values for use with <code>speculative_feature_state</code> and\n<code>PR_SPEC_*</code> flags for use with <code>control_speculative_feature</code>.\nZero means the processors are not vulnerable.\nSet the state of the speculative store bypass misfeature.\n<code>RLIMIT_STACK</code>\nSet the start address of the stack.\nNormal, traditional, statistical process timing.\n<code>SIGSTKFLT</code>\n<code>SIGSTOP</code>\n<code>SIGSYS</code>, aka <code>SIGUNUSED</code>\n<code>SIGTERM</code>\nAccurate timestamp based process timing.\n<code>PR_TSC_*</code> values for use with <code>time_stamp_counter_readability</code>…\n<code>PR_TIMING_*</code> values for use with <code>timing_method</code> and …\n<code>SIGTRAP</code>\n<code>SIGTSTP</code>\n<code>SIGTTIN</code>\n<code>SIGTTOU</code>\nFloating point underflow.\nReturn if a child has stopped (but not traced via <code>ptrace</code>)\n<code>uid_t</code>—A Unix user ID.\n<code>PR_UNALIGN_*</code> flags for use with <code>unaligned_access_control</code> …\n<code>SIGURG</code>\n<code>SIGUSR1</code>\n<code>SIGUSR2</code>\n<code>PR_SET_MM_*</code> values for use with …\n<code>SIGVTALRM</code>\nThe identifier to wait on in a call to <code>waitid</code>.\nOptions for modifying the behavior of <code>wait</code>/<code>waitpid</code>.\nThe status of a child process after calling <code>wait</code>/<code>waitpid</code>.\nOptions for modifying the behavior of <code>waitid</code>.\nThe status of a process after calling <code>waitid</code>.\n<code>SIGWINCH</code>\n<code>SIGXCPU</code>\n<code>SIGXFSZ</code>\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nGet a flags value with all known bits set.\nProgram command line end address.\nProgram command line start address.\nConverts a <code>Cpuid</code> into a <code>RawCpuid</code>.\nConverts a <code>WaitStatus</code> into its raw representation as an …\nReturns a reference to the raw platform-specific <code>siginfo_t</code> …\nConverts an <code>Option&lt;Pid&gt;</code> into a <code>RawPid</code>.\nConverts a <code>Pid</code> into a <code>NonZeroI32</code>.\nAuxiliary vector start address.\nAuxiliary vector size.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\n<code>brk</code> current address.\n<code>chdir(path)</code>—Change the current working directory.\nGet the <code>child subreaper</code> setting of the calling process.\n<code>chroot(path)</code>—Change the process root directory.\nZeroes the <code>CpuSet</code>.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nPut the process in the <code>IO_FLUSHER</code> state, allowing it to …\nEnable or disable all performance counters attached to the …\nSet enabled pointer authentication keys.\nProvides one-shot access to all the addresses by passing …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nWhether all set bits in a source flags value are also set …\nTest whether this query result contains the given command.\nReturns whether the process has continued from a job …\nReturns whether the process has continued from a job …\nSets the state of the speculation misfeature.\nCount the number of CPUs set in the <code>CpuSet</code>.\nCurrent effective, “soft”, limit.\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nGet the current state of the calling process’ <code>dumpable</code> …\nReturns whether the process was terminated by a signal and …\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet a flags value with all bits unset.\nGet enabled pointer authentication keys.\nCode section end address.\nData section end address.\nGet the endianness of the calling process.\nProgram environment end address.\nProgram environment start address.\nFile descriptor of executable file that was used to create …\nReturns the exit status number returned by the process, if …\nReturns the exit status number returned by the process, if …\nReturns whether the process has exited normally.\nReturns whether the process has exited normally.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\n<code>fchdir(fd)</code>—Change the current working directory.\nGet floating point emulation control bits.\nGet floating point exception mode.\nGet the current floating point mode.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nConvert from a bits value, unsetting any unknown bits.\nCreates a <code>Pid</code> holding the ID of the given child process.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nGet a flags value with the bits of a flag with the given …\nConverts a <code>RawCpuid</code> into a <code>Cpuid</code>.\nConverts a <code>RawPid</code> into a <code>Pid</code>.\nConvert a raw signal number into a <code>Signal</code>, if possible.\nConverts a known positive <code>RawPid</code> into a <code>Pid</code>.\n<code>getCWD</code>—Return the current working directory.\n<code>getegid()</code>—Returns the process’ effective group ID.\n<code>geteuid()</code>—Returns the process’ effective user ID.\n<code>getgid()</code>—Returns the process’ real group ID.\n<code>getgroups()</code>—Return a list of the current user’s groups.\n<code>getpgid(pid)</code>—Returns the process group ID of the given …\n<code>getpgrp()</code>—Returns the process’ group ID.\n<code>getpid()</code>—Returns the process’ ID.\n<code>getppid()</code>—Returns the parent process’ ID.\n<code>getpriority(PRIO_PGRP, gid)</code>—Get the scheduling priority …\n<code>getpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>getpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>getrlimit(resource)</code>—Get a process resource limit value.\n<code>getsid(pid)</code>—Get the session ID of the given process.\n<code>getuid()</code>—Returns the process’ real user ID.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>ioctl(fd, TIOCSCTTY, 0)</code>—Sets the controlling terminal …\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nWhether all bits in this flags value are unset.\nTest whether this pid represents the init process (pid 1).\nGet the <code>IO_FLUSHER</code> state of the caller.\nTest to see if a CPU is in the <code>CpuSet</code>.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\nYield a set of contained named flags values.\n<code>kill(0, sig)</code>—Sends a signal to all processes in the …\n<code>kill(pid, sig)</code>—Sends a signal to a process.\n<code>kill(-pid, sig)</code>—Sends a signal to all processes in a …\nReturns whether the process was terminated by a signal and …\nGet the current per-process machine check kill policy.\nMaximum, “hard”, value that <code>current</code> may be dynamically …\n<code>membarrier(cmd, 0, 0)</code>—Perform a memory barrier.\n<code>membarrier(cmd, MEMBARRIER_CMD_FLAG_CPU, cpu)</code>—Perform a …\n<code>membarrier(MEMBARRIER_CMD_QUERY, 0, 0)</code>—Query the …\nCreate a new and empty <code>CpuSet</code>.\n<code>nice(inc)</code>—Adjust the scheduling priority of the current …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nGet the current value of the parent process death signal.\n<code>syscall(SYS_pidfd_getfd, pidfd, flags)</code>—Obtain a …\n<code>syscall(SYS_pidfd_open, pid, flags)</code>—Creates a file …\n<code>syscall(SYS_pidfd_send_signal, pidfd, sig, NULL, 0)</code>—Send …\n<code>prlimit(pid, resource, new)</code>—Get and set a process …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\n<code>sched_getaffinity(pid)</code>—Get a thread’s CPU affinity …\n<code>sched_getcpu()</code>—Get the CPU that the current thread is …\n<code>sched_setaffinity(pid, cpuset)</code>—Set a thread’s CPU …\n<code>sched_yield()</code>—Hints to the OS that other processes …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nAdd a CPU to <code>CpuSet</code>.\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nSet a new auxiliary vector.\nSet the <code>child subreaper</code> attribute of the calling process.\nSet the state of the <code>dumpable</code> attribute, which determines …\nSet the endianness of the calling process.\nSupersede the <code>/proc/pid/exe</code> symbolic link with a new one …\nSet floating point emulation control bits.\nSet floating point exception mode.\nAllow control of the floating point mode from user space.\nSet the machine check memory corruption kill policy for …\nSet the parent-death signal of the calling process.\nDeclare that the ptracer process can <code>ptrace</code> the calling …\nSet the state of the flag determining if the timestamp …\nSet whether to use (normal, traditional) statistical …\nSet unaligned access control bits.\nModify certain kernel memory map descriptor addresses of …\nSet the name for a virtual memory region.\n<code>setpgid(pid, pgid)</code>—Sets the process group ID of the …\n<code>setpriority(PRIO_PGRP, pgid)</code>—Get the scheduling priority …\n<code>setpriority(PRIO_PROCESS, pid)</code>—Get the scheduling …\n<code>setpriority(PRIO_USER, uid)</code>—Get the scheduling priority …\n<code>setrlimit(resource, new)</code>—Set a process resource limit …\n<code>setsid()</code>—Create a new session.\nReturns whether the process was terminated by a signal.\nGet the state of the speculation misfeature.\n<code>brk</code> start address.\nCode section start address.\nData section start address.\nStack start address.\nReturns whether the process is currently stopped.\nReturns whether the process is currently stopped.\nReturns the number of the signal that stopped the process, …\nReturns the number of the signal that stopped the process, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns the number of the signal that terminated the …\nReturns the number of the signal that terminated the …\n<code>kill(0, 0)</code>—Check validity of pid and permissions to send …\n<code>kill(pid, 0)</code>—Check validity of pid and permissions to …\n<code>kill(-pid, 0)</code>—Check validity of pid and permissions to …\nGet the state of the flag determining if the timestamp …\nGet which process timing method is currently in use.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nReturns whether the process is currently trapped.\nReturns the number of the signal that trapped the process, …\n<code>umask(mask)</code>—Set the process file creation mask.\nGet unaligned access control bits.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nRemove a CPU from <code>CpuSet</code>.\nGet the size of the <code>PrctlMmMap</code> the kernel expects.\n<code>wait(waitopts)</code>—Wait for any of the children of calling …\n<code>waitid(_, _, _, opts)</code>—Wait for the specified child …\n<code>waitpid(-pgid, waitopts)</code>—Wait for a process in a …\n<code>waitpid(pid, waitopts)</code>—Wait for a specific process to …")