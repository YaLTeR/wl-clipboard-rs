searchState.loadedDescShard("wl_clipboard_rs", 0, "A safe Rust crate for working with the Wayland clipboard.\nCopying and clearing clipboard contents.\nGetting the offered MIME types and the clipboard contents.\nHelper functions.\nOperate on all existing seats at once.\nDetect the MIME type automatically from the data.\nOperate on both clipboards at once.\nCopy the given bytes.\nThe clipboard to operate on.\nErrors that can occur for copying and clearing the …\nSource for copying, with a MIME type.\nMIME type to offer the copied data under.\nServe only the given number of requests.\nOptions and flags that are used to customize the copying.\nA copy operation ready to start serving requests.\nThe “primary” clipboard.\nThe regular clipboard.\nSeat to operate on.\nNumber of paste requests to serve.\nSource for copying.\nErrors that can occur for copying the source data to a …\nOffer a specific MIME type.\nOperate on a seat with the given name.\nCopy contents of the standard input.\nOffer a number of common plain text MIME types.\nServe requests indefinitely.\nClears the clipboard for the given seat.\nSets the clipboard to work with.\nCopies data to the clipboard.\nInvokes the copy operation. See <code>copy()</code>.\nCopies data to the clipboard, offering multiple data …\nInvokes the copy_multi operation. See <code>copy_multi()</code>.\nSets the flag for not spawning a separate thread for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a blank new set of options ready for configuration.\nSets the flag for omitting additional text mime types …\nPrepares a data copy to the clipboard.\nInvokes the prepare_copy operation. See <code>prepare_copy()</code>.\nPrepares a data copy to the clipboard, offering multiple …\nInvokes the prepare_copy_multi operation. See …\nSets the seat to use for copying.\nStarts serving copy requests.\nSets the number of requests to serve.\nSets the flag for trimming the trailing newline.\nRequest any available MIME type.\nThe clipboard to operate on.\nErrors that can occur for pasting and listing MIME types.\nMIME types that can be requested from the clipboard.\nThe “primary” clipboard.\nThe regular clipboard.\nSeat to operate on.\nRequest a specific MIME type.\nOperate on a seat with the given name.\nRequest a plain text MIME type.\nRequest the given MIME type, and if it’s not available …\nOperate on one of the existing seats depending on the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the clipboard contents.\nRetrieves the offered MIME types.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors that can occur when checking whether the primary …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the compositor supports the primary selection.\nChecks if the given MIME type represents plain text.")